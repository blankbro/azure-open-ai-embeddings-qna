# =========>>> Azure OpenAI（GPT模型）相关配置
# 自然语言处理模型，它可以对输入的文本进行理解和生成，能够完成文本生成、问答、摘要等多种任务。
OPENAI_ENGINE=text-davinci-003
OPENAI_DEPLOYMENT_TYPE=Text
# 文本嵌入模型，它可以将输入的文本转换为固定长度的向量，便于后续的文本分类、聚类等任务。
OPENAI_EMBEDDINGS_ENGINE=text-embedding-ada-002
OPENAI_EMBEDDINGS_ENGINE_DOC=text-embedding-ada-002
OPENAI_EMBEDDINGS_ENGINE_QUERY=text-embedding-ada-002
# Azure OpenAI 的终结点和秘钥
OPENAI_API_BASE=https://YOUR_AZURE_OPENAI_RESOURCE.openai.azure.com/
OPENAI_API_KEY=YOUR_AZURE_OPENAI_API_KEY
# 控制随机性。降低温度意味着模型将产生更多重复和确定性的响应。增加温度会导致更多意外或创造性的响应。
OPENAI_TEMPERATURE=0.7
# 设置每个模型响应的令牌数量限制。API 支持最多 4000 个令牌，这些令牌在提示(包括系统消息、示例、消息历史记录和用户查询)和模型响应之间共享。一个令牌大约是典型英文文本的 4 个字符。
OPENAI_MAX_TOKENS=-1

# =========>>> 文本分割 相关配置
# 文本分割类型，详情请看：code/utilities/custom_text_splitter.py
TEXT_SPLIT_TYPE=default
# 一个向量块大小
CHUNK_SIZE=500
# 向量之间重叠量
CHUNK_OVERLAP=100

# =========>>> VectorStore 相关配置
VECTOR_STORE_TYPE=RediSearch
AZURE_SEARCH_SERVICE_NAME=YOUR_AZURE_SEARCH_SERVICE_NAME
AZURE_SEARCH_ADMIN_KEY=YOUR_AZURE_SEARCH_ADMIN_KEY
REDIS_ADDRESS=api
REDIS_PORT=6379
REDIS_PASSWORD=redis-stack-password
REDIS_ARGS=--requirepass $REDIS_PASSWORD
# 如何要使用 AzureSearch 下面字段将不再适用，页面和代码都要改，但是现在还没有改，请注意
REDISEARCH_TOP_K=4
REDISEARCH_SCORE_THRESHOLD=0.4
REDISEARCH_SEARCH_TYPE=similarity

# =========>>> 存储账号 相关配置（用于存储知识库源文档，以及通过 form recognizer 提取出来的文本文件）
BLOB_ACCOUNT_NAME=YOUR_AZURE_BLOB_STORAGE_ACCOUNT_NAME
BLOB_ACCOUNT_KEY=YOUR_AZURE_BLOB_STORAGE_ACCOUNT_KEY
# 容器名称，即存储 知识库源文件 的地方
BLOB_CONTAINER_NAME=YOUR_AZURE_BLOB_STORAGE_CONTAINER_NAME
# 队列名称，即批处理排队的地方
QUEUE_NAME=doc-processing

# =========>>> 表单识别器 相关配置（识别pdf、jpeg提取其中的文本）
FORM_RECOGNIZER_ENDPOINT=YOUR_AZURE_FORM_RECOGNIZER_ENDPOINT
FORM_RECOGNIZER_KEY=YOUR_AZURE_FORM_RECOGNIZER_KEY

# =========>>> 翻译工具 相关配置
TRANSLATE_ENDPOINT=YOUR_AZURE_TRANSLATE_ENDPOINT
TRANSLATE_KEY=YOUR_AZURE_TRANSLATE_KEY
TRANSLATE_REGION=YOUR_AZURE_TRANSLATE_REGION

# 如果您想在VNET中部署解决方案，则将布尔变量设置为“true”。
VNET_DEPLOYMENT=false

# 向量相似度搜索之后，取 Top {NUMBER_OF_EMBEDDINGS_FOR_QNA}。应该是这个意图
NUMBER_OF_EMBEDDINGS_FOR_QNA=3

# 批处理的URL，即 docker-compose.yml 中 fruocco/oai-batch 项目，开始批处理的URL
# 如果没有用 docker compose 方式启动，只需要设定为批处理项目对应的 URL，修改的地方有3处：
# 1. 检查协议是否需要修改为 https
# 2. 将 batch 替换为真实域名
# 3. 为URL 添加 code 参数，但是 code 从哪里获取，目前还不未知
CONVERT_ADD_EMBEDDINGS_URL=http://batch/api/BatchStartProcessing

# "存储账号"的队列名称。批处理Azure函数使用Azure存储帐户对要处理的文档进行排队。
AzureWebJobsStorage=AZURE_BLOB_STORAGE_CONNECTION_STRING_FOR_AZURE_FUNCTION_EXECUTION

# 用户给出的问题、指令或信息，用来引导模型生成回应的内容
QUESTION_PROMPT=Please reply to the question using only the information present in the text above. If you can't find it, reply 'Not in the text'.\nQuestion: _QUESTION_\nAnswer:
CONDENSE_QUESTION_PROMPT=Given the following conversation and a follow up question, rephrase the follow up question to be a standalone question.\n\nChat History:\n{chat_history}\nFollow Up Input: {question}\nStandalone question:
COMPLETION_PROMPT={summaries}\nPlease reply to the question using only the information present in the text above. \nInclude references to the sources you used to create the answer if those are relevant ("SOURCES"). \nIf you can't find it, reply politely that the information is not in the knowledge base.\nQuestion: {question}\nAnswer:
